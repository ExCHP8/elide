public abstract interface class elide/runtime/feature/FrameworkFeature : org/graalvm/nativeimage/hosted/Feature {
	public fun findClassesInJar (Ljava/net/JarURLConnection;Ljava/lang/String;)Ljava/util/List;
	public fun getMethodOrFail (Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
	public fun logging ()Lelide/runtime/Logger;
	public fun registerClassForReflection (Lorg/graalvm/nativeimage/hosted/Feature$FeatureAccess;Ljava/lang/String;)V
	public fun registerClassHierarchyForReflection (Lorg/graalvm/nativeimage/hosted/Feature$FeatureAccess;Ljava/lang/String;)V
	public fun registerConstructorsForReflection (Lorg/graalvm/nativeimage/hosted/Feature$FeatureAccess;Ljava/lang/String;)V
	public fun registerForReflectiveInstantiation (Lorg/graalvm/nativeimage/hosted/Feature$FeatureAccess;Ljava/lang/String;)V
	public fun registerForUnsafeFieldAccess (Lorg/graalvm/nativeimage/hosted/Feature$FeatureAccess;Ljava/lang/String;[Ljava/lang/String;)V
	public fun registerPackageForReflection (Lorg/graalvm/nativeimage/hosted/Feature$FeatureAccess;Ljava/lang/String;)V
}

public final synthetic class elide/runtime/graalvm/$JsRuntime$ExecutionInputs$ReflectConfig : io/micronaut/core/graal/GraalReflectionConfigurer {
	public static final field $ANNOTATION_METADATA Lio/micronaut/core/annotation/AnnotationMetadata;
	public fun <init> ()V
	public fun getAnnotationMetadata ()Lio/micronaut/core/annotation/AnnotationMetadata;
}

public final synthetic class elide/runtime/graalvm/$JsRuntime$JsRuntimeProvider$Definition$Reference : io/micronaut/context/AbstractInitializableBeanDefinitionReference {
	public static final field $ANNOTATION_METADATA Lio/micronaut/core/annotation/AnnotationMetadata;
	public fun <init> ()V
	public fun getBeanDefinitionType ()Ljava/lang/Class;
	public fun getBeanType ()Ljava/lang/Class;
	public fun load ()Lio/micronaut/inject/BeanDefinition;
}

public final class elide/runtime/graalvm/JsRuntime {
	public static final field Companion Lelide/runtime/graalvm/JsRuntime$Companion;
	public static final fun acquire ()Lelide/runtime/graalvm/JsRuntime;
	public final fun execSuspend (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun execSuspendAsync (Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun execute (Lelide/runtime/graalvm/JsRuntime$ExecutableScript;Ljava/lang/Class;[Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun executeAsync (Lelide/runtime/graalvm/JsRuntime$ExecutableScript;Ljava/lang/Class;[Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun executeBlocking (Lelide/runtime/graalvm/JsRuntime$ExecutableScript;Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
	public final fun executeStreaming (Lelide/runtime/graalvm/JsRuntime$ExecutableScript;[Ljava/lang/Object;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun prewarmScript (Lelide/runtime/graalvm/JsRuntime$ExecutableScript;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun serverResponseFromRaw (Lorg/graalvm/polyglot/Value;)Lelide/runtime/ssr/ServerResponse;
}

public final class elide/runtime/graalvm/JsRuntime$Companion {
	public final fun acquire ()Lelide/runtime/graalvm/JsRuntime;
}

public final class elide/runtime/graalvm/JsRuntime$EmbeddedScript : elide/runtime/graalvm/JsRuntime$ExecutableScript {
	public static final field Companion Lelide/runtime/graalvm/JsRuntime$EmbeddedScript$Companion;
	public fun <init> (Ljava/lang/String;Ljava/nio/charset/Charset;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/nio/charset/Charset;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getPath ()Ljava/lang/String;
}

public final class elide/runtime/graalvm/JsRuntime$EmbeddedScript$Companion {
}

public abstract class elide/runtime/graalvm/JsRuntime$ExecutableScript {
	public synthetic fun <init> (ZZLjava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun <init> (ZZLjava/lang/String;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public final class elide/runtime/graalvm/JsRuntime$ExecutionInputs {
	public static final field CONTEXT Ljava/lang/String;
	public static final field Companion Lelide/runtime/graalvm/JsRuntime$ExecutionInputs$Companion;
	public static final field STATE Ljava/lang/String;
	public fun <init> ()V
	public fun <init> (Ljava/util/Map;)V
	public synthetic fun <init> (Ljava/util/Map;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun context ()Lelide/server/type/RequestState;
	public static final fun fromRequestState (Lelide/server/type/RequestState;Ljava/lang/Object;)Lelide/runtime/graalvm/JsRuntime$ExecutionInputs;
	public final fun getData ()Ljava/util/Map;
	public final fun path ()Ljava/lang/String;
	public final fun state ()Ljava/lang/Object;
}

public final class elide/runtime/graalvm/JsRuntime$ExecutionInputs$Companion {
	public final fun fromRequestState (Lelide/server/type/RequestState;Ljava/lang/Object;)Lelide/runtime/graalvm/JsRuntime$ExecutionInputs;
	public final fun getEMPTY ()Lelide/runtime/graalvm/JsRuntime$ExecutionInputs;
}

public final class elide/runtime/graalvm/JsRuntime$JsRuntimeProvider : elide/server/ServerInitializer, java/util/function/Supplier {
	public fun <init> ()V
	public fun get ()Lelide/runtime/graalvm/JsRuntime;
	public synthetic fun get ()Ljava/lang/Object;
	public fun initialize ()V
}

public final class elide/runtime/graalvm/JsRuntime$LiteralScript : elide/runtime/graalvm/JsRuntime$ExecutableScript {
	public static final field Companion Lelide/runtime/graalvm/JsRuntime$LiteralScript$Companion;
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
}

public final class elide/runtime/graalvm/JsRuntime$LiteralScript$Companion {
}

public final class elide/runtime/graalvm/JsRuntime$Script {
	public static final field INSTANCE Lelide/runtime/graalvm/JsRuntime$Script;
	public static final fun embedded (Ljava/lang/String;Ljava/nio/charset/Charset;Ljava/lang/String;)Lelide/runtime/graalvm/JsRuntime$EmbeddedScript;
	public static synthetic fun embedded$default (Ljava/lang/String;Ljava/nio/charset/Charset;Ljava/lang/String;ILjava/lang/Object;)Lelide/runtime/graalvm/JsRuntime$EmbeddedScript;
	public static final fun literal (Ljava/lang/String;Ljava/lang/String;)Lelide/runtime/graalvm/JsRuntime$ExecutableScript;
}

public abstract interface class elide/runtime/gvm/ExecutableScript {
	public abstract fun language ()Lelide/runtime/gvm/GuestLanguage;
}

public abstract interface class elide/runtime/gvm/GuestLanguage {
	public abstract fun getLabel ()Ljava/lang/String;
	public fun getSupportsSSR ()Z
	public fun getSupportsStreamingSSR ()Z
	public abstract fun getSymbol ()Ljava/lang/String;
}

public abstract interface class elide/runtime/gvm/VMEngine {
	public abstract fun execute (Lelide/runtime/gvm/ExecutableScript;Ljava/lang/Class;[Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun executeAsync (Lelide/runtime/gvm/ExecutableScript;Ljava/lang/Class;[Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun executeBlocking (Lelide/runtime/gvm/ExecutableScript;Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
	public abstract fun executeStreaming (Lelide/runtime/gvm/ExecutableScript;[Ljava/lang/Object;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun language ()Lelide/runtime/gvm/GuestLanguage;
	public abstract fun prewarmScript (Lelide/runtime/gvm/ExecutableScript;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class elide/runtime/gvm/VMEngineFactory {
	public abstract fun acquire ()Lelide/runtime/gvm/VMEngine;
}

public abstract interface class elide/runtime/gvm/intrinsics/js/console/JavaScriptConsole {
	public abstract fun error ([Ljava/lang/Object;)V
	public abstract fun info ([Ljava/lang/Object;)V
	public abstract fun log ([Ljava/lang/Object;)V
	public abstract fun warn ([Ljava/lang/Object;)V
}

public abstract interface class elide/runtime/gvm/intrinsics/js/stream/CoreStreams {
}

public abstract interface class elide/runtime/gvm/intrinsics/js/webstreams/ReadableStream {
}

public final class elide/server/SSRExtensionsKt {
	public static final field DEFAULT_INVOCATION_STREAM_TARGET Ljava/lang/String;
	public static final field DEFAULT_INVOCATION_TARGET Ljava/lang/String;
	public static final field DEFAULT_SSR_DOM_ID Ljava/lang/String;
	public static final field EMBEDDED_ROOT Ljava/lang/String;
	public static final field NODE_SSR_DEFAULT_PATH Ljava/lang/String;
	public static final fun getDEFAULT_INVOCATION_BASE ()Ljava/lang/String;
	public static final fun injectSSR (Lkotlinx/html/BODY;Lelide/server/controller/ElideController;Lio/micronaut/http/HttpRequest;Ljava/lang/String;Ljava/util/Set;Ljava/util/List;Ljava/lang/String;ZLjava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun injectSSR$default (Lkotlinx/html/BODY;Lelide/server/controller/ElideController;Lio/micronaut/http/HttpRequest;Ljava/lang/String;Ljava/util/Set;Ljava/util/List;Ljava/lang/String;ZLjava/lang/String;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static final fun ssr (Lio/micronaut/http/HttpRequest;Ljava/lang/String;Lio/micronaut/http/MutableHttpResponse;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun ssr$default (Lio/micronaut/http/HttpRequest;Ljava/lang/String;Lio/micronaut/http/MutableHttpResponse;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static final fun streamSSR (Lkotlinx/html/BODY;Lelide/server/controller/ElideController;Lio/micronaut/http/HttpRequest;Ljava/lang/String;Ljava/util/Set;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun streamSSR$default (Lkotlinx/html/BODY;Lelide/server/controller/ElideController;Lio/micronaut/http/HttpRequest;Ljava/lang/String;Ljava/util/Set;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public final synthetic class elide/server/ssr/$ServerSSRRenderer$SSRInitializer$Definition$Reference : io/micronaut/context/AbstractInitializableBeanDefinitionReference {
	public static final field $ANNOTATION_METADATA Lio/micronaut/core/annotation/AnnotationMetadata;
	public fun <init> ()V
	public fun getBeanDefinitionType ()Ljava/lang/Class;
	public fun getBeanType ()Ljava/lang/Class;
	public fun load ()Lio/micronaut/inject/BeanDefinition;
}

public abstract interface class elide/server/ssr/ServerRenderer : elide/server/ResponseRenderer {
}

public final class elide/server/ssr/ServerSSRRenderer : elide/server/SuspensionRenderer {
	public static final field Companion Lelide/server/ssr/ServerSSRRenderer$Companion;
	public static final field ssrId Ljava/lang/String;
	public fun <init> (Lkotlinx/html/BODY;Lelide/server/controller/ElideController;Lio/micronaut/http/HttpRequest;Lelide/runtime/graalvm/JsRuntime$ExecutableScript;Ljava/lang/StringBuilder;Ljava/util/concurrent/atomic/AtomicReference;)V
	public synthetic fun <init> (Lkotlinx/html/BODY;Lelide/server/controller/ElideController;Lio/micronaut/http/HttpRequest;Lelide/runtime/graalvm/JsRuntime$ExecutableScript;Ljava/lang/StringBuilder;Ljava/util/concurrent/atomic/AtomicReference;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun render (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun renderResponse (Lio/micronaut/http/MutableHttpResponse;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun renderSuspendAsync (ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun renderSuspendAsync$default (Lelide/server/ssr/ServerSSRRenderer;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public final class elide/server/ssr/ServerSSRRenderer$Companion {
}

public final class elide/server/ssr/ServerSSRRenderer$SSRInitializer : elide/server/ServerInitializer {
	public fun <init> ()V
	public fun initialize ()V
}

