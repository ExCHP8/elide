// automatically generated by the FlatBuffers compiler, do not modify

package elide.vfs.TreeEntry_

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class Anonymous2 : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Anonymous2 {
        __init(_i, _bb)
        return this
    }
    val file : elide.vfs.File? get() = file(elide.vfs.File())
    fun file(obj: elide.vfs.File) : elide.vfs.File? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val directory : elide.vfs.Directory? get() = directory(elide.vfs.Directory())
    fun directory(obj: elide.vfs.Directory) : elide.vfs.Directory? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsAnonymous2(_bb: ByteBuffer): Anonymous2 = getRootAsAnonymous2(_bb, Anonymous2())
        fun getRootAsAnonymous2(_bb: ByteBuffer, obj: Anonymous2): Anonymous2 {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createAnonymous2(builder: FlatBufferBuilder, fileOffset: Int, directoryOffset: Int) : Int {
            builder.startTable(2)
            addDirectory(builder, directoryOffset)
            addFile(builder, fileOffset)
            return endAnonymous2(builder)
        }
        fun startAnonymous2(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addFile(builder: FlatBufferBuilder, file: Int) = builder.addOffset(0, file, 0)
        fun addDirectory(builder: FlatBufferBuilder, directory: Int) = builder.addOffset(1, directory, 0)
        fun endAnonymous2(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
