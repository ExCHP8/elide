// automatically generated by the FlatBuffers compiler, do not modify

package elide.vfs.File_.Fingerprint_

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class Anonymous0 : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Anonymous0 {
        __init(_i, _bb)
        return this
    }
    fun crc32(j: Int) : UByte {
        val o = __offset(4)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val crc32Length : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    val crc32AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun crc32InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    fun hash(j: Int) : UByte {
        val o = __offset(6)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val hashLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val hashAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun hashInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsAnonymous0(_bb: ByteBuffer): Anonymous0 = getRootAsAnonymous0(_bb, Anonymous0())
        fun getRootAsAnonymous0(_bb: ByteBuffer, obj: Anonymous0): Anonymous0 {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createAnonymous0(builder: FlatBufferBuilder, crc32Offset: Int, hashOffset: Int) : Int {
            builder.startTable(2)
            addHash(builder, hashOffset)
            addCrc32(builder, crc32Offset)
            return endAnonymous0(builder)
        }
        fun startAnonymous0(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addCrc32(builder: FlatBufferBuilder, crc32: Int) = builder.addOffset(0, crc32, 0)
        fun createCrc32Vector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startCrc32Vector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun addHash(builder: FlatBufferBuilder, hash: Int) = builder.addOffset(1, hash, 0)
        fun createHashVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startHashVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun endAnonymous0(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
