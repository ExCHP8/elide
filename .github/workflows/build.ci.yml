name: Framework

on:
  push:
    branches:
      - v3
      - main
      - stable
  pull_request:
    types: [labeled, opened, reopened, synchronize]

env:
  GRADLE_CACHE_USERNAME: ${{ secrets.GRADLE_CACHE_USERNAME }}
  GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}
  GRADLE_CACHE_PUSH: true

jobs:
  ##
  ## Job: Dependency Review
  ##
  dependency-review:
    name: "Dependency Review"
    runs-on: "ubuntu-latest"
    permissions:
      contents: "read"
      id-token: "write"
      checks: "write"
      pull-requests: "write"
    steps:
      - name: "Setup: Checkout"
        uses: "actions/checkout@v3"
      - name: "Patch: Neutralize Yarn Lock"
        run: mv kotlin-js-store/yarn.lock kotlin-js-store/yarn.inert
      - name: "Dependency Review"
        uses: "actions/dependency-review-action@v3"
        continue-on-error: true
        with:
          config-file: "./.github/dependency-review-config.yml"
          license-check: true
          vulnerability-check: true
          fail-on-severity: "low"
      - name: "Patch: Restore Yarn Lock"
        run: mv kotlin-js-store/yarn.inert kotlin-js-store/yarn.lock

  ##
  ## Job: Detekt
  ##

  detekt:
    name: "Detekt"
    runs-on: "ubuntu-latest"
    continue-on-error: true
    permissions:
      security-events: write
      actions: read
      contents: read
    env:
      GRADLE_OPTS: -Dorg.gradle.daemon=false
    steps:
      ## Setup: Checkout
      - name: "Setup: Checkout"
        uses: "actions/checkout@v3"

      ## Setup: GraalVM
      - name: "Setup: GraalVM"
        uses: graalvm/setup-graalvm@v1
        with:
          components: "native-image,js"
          version: latest
          java-version: 17
          github-token: ${{ secrets.GITHUB_TOKEN }}

      ## Run Detekt
      - name: Run Detekt
        run: ./gradlew detekt

      ## Upload SARIF to GitHub.
      - name: Upload SARIF to Github using the upload-sarif action
        uses: github/codeql-action/upload-sarif@v1
        if: success() || failure()
        with:
          sarif_file: ./build/reports/detekt/elide.sarif
          category: detekt

  ##
  ## Job: Library Build
  ##

  gradle:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        experimental: [false]
        gu-binary: [gu]
        java: [17]
        include:
          - os: ubuntu
            experimental: false
            gu-binary: gu
            java: 11
          - os: macos
            experimental: false
            gu-binary: gu
            java: 17
          - os: macos
            experimental: false
            gu-binary: gu
            java: 11

    name: "Build"
    runs-on: ${{ matrix.os }}-latest
    continue-on-error: ${{ matrix.experimental }}

    permissions:
      contents: "read"
      id-token: "write"
      checks: "write"
      pull-requests: "write"

    defaults:
      run:
        shell: bash

    steps:
      ## Setup: Checkout Code
      - name: "Setup: Checkout"
        uses: actions/checkout@v3

      ## Setup: GraalVM
      - name: "Setup: GraalVM"
        uses: graalvm/setup-graalvm@v1
        with:
          components: "native-image,js"
          version: latest
          java-version: ${{ matrix.java }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      ## Setup: Node
      - name: "Setup: Node"
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"

      ## Setup: Run Yarn
      - name: "Setup: Yarn"
        run: yarn

      ## Setup: GCloud Auth
      - id: "auth"
        name: "Setup: Authorize Service Account"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.BUILDBOT_SERVICE_ACCOUNT }}"
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true

      ## CI: Build
      - name: "üõ†Ô∏è Build"
        uses: gradle/gradle-build-action@v2.3.3
        id: gradlebuild
        continue-on-error: ${{ matrix.experimental }}
        env:
          CI: true
        with:
          cache-read-only: false
          arguments: |
            assemble
            --scan
            --dependency-verification=lenient
            -Pelide.ci=true
            -PbuildSamples=false
            -Pversions.java.language=${{ matrix.java }}

      ## CI: Build
      - name: "Build reports"
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: build-reports-${{ matrix.os }}-latest-java${{ matrix.java }}-gvm-latest
          path: |
            build/reports/**/*.*

  ##
  ## Samples: Build & Test
  ##
  samples:
    permissions:
      contents: "read"
      id-token: "write"
      checks: "write"
      pull-requests: "write"

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        experimental: [false]
        gu-binary: [gu]
        java: [17]
        include:
          - os: ubuntu
            experimental: false
            gu-binary: gu
            java: 11

    name: "Samples"
    runs-on: ${{ matrix.os }}-latest
    continue-on-error: ${{ matrix.experimental }}
    needs: [gradle, dependency-review]

    steps:
      ## Setup: Checkout Code
      - name: "Setup: Checkout"
        uses: actions/checkout@v3

      ## Setup: GraalVM
      - name: "Setup: GraalVM"
        uses: graalvm/setup-graalvm@v1
        with:
          components: "native-image,js"
          version: latest
          java-version: ${{ matrix.java }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      ## Setup: Node
      - name: "Setup: Node"
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"

      ## Setup: GCloud Auth
      - id: "auth"
        name: "Setup: Authorize Service Account"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.BUILDBOT_SERVICE_ACCOUNT }}"
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true

      ## Setup: Run Yarn
      - name: "Setup: Yarn"
        run: yarn

      ## CI: Test
      - name: "üõ†Ô∏è Build: Samples"
        uses: gradle/gradle-build-action@v2.3.3
        id: gradletest
        continue-on-error: true
        env:
          CI: true
        with:
          cache-read-only: ${{ matrix.os != 'ubuntu' }}
          arguments: |
            samples
            --scan
            --dependency-verification=lenient
            -Pelide.ci=true
            -PbuildSamples=true
            -Pversions.java.language=${{ matrix.java }}

  ##
  ## Job: Testsuite (JVM)
  ##
  tests-jvm:
    name: "Tests: JVM"
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [dependency-review]

    permissions:
      contents: "read"
      id-token: "write"
      checks: "write"
      pull-requests: "write"

    steps:
      ## Setup: Checkout Code
      - name: "Setup: Checkout"
        uses: actions/checkout@v3

      ## Setup: Expand Git History
      - name: "Setup: Git History"
        run: git fetch --unshallow || exit 0

      ## Setup: GraalVM
      - name: "Setup: GraalVM"
        uses: graalvm/setup-graalvm@v1
        with:
          components: "native-image,js"
          version: latest
          java-version: 17
          github-token: ${{ secrets.GITHUB_TOKEN }}

      ## Setup: GCloud Auth
      - id: "auth"
        name: "Setup: Authorize Service Account"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.BUILDBOT_SERVICE_ACCOUNT }}"
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true

      ## Setup: Node
      - name: "Setup: Node"
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      ## Setup: Run Yarn
      - name: "Setup: Yarn"
        run: yarn

      ## Run JVM Tests
      - name: "Run Tests (JVM)"
        uses: gradle/gradle-build-action@v2.3.3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          cache-read-only: false
          arguments: |
            build
            test
            check
            jacocoTestReport
            koverMergedHtmlReport
            koverMergedXmlReport
            koverMergedReport
            :tools:reports:reports
            sonar
            --scan
            --warning-mode=none
            --dependency-verification=lenient
            -Pelide.ci=true
            -PbuildSamples=true
            -PbuildDocs=false
            -Pversions.java.language=17
            -x nativeTest
            -x testNativeImage
            -x nativeCompile

      ## Collect Reports
      - uses: actions/upload-artifact@v3
        with:
          name: test-reports-jvm
          path: |
            **/build/reports/jacoco/test/jacocoTestReport.xml
            **/build/reports/jacoco/testCodeCoverageReport/jacocoTestReport.xml
            **/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml
            build/reports/kover/merged/html/**/*.*
            tools/reports/build/reports/**/*.xml
            tools/reports/build/test-results/**/*.xml

      ## Annotate test results
      - name: "Annotate: Test Results"
        uses: elide-tools/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: "**/build/test-results/test/TEST-*.xml"

      ## Inflate missing git history
      - name: "Setup: Git History"
        run: git fetch --unshallow || exit 0

      ## Upload to Codecov (JVM)
      - name: "Report: Codecov"
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./tools/reports/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml
          name: jvm
          fail_ci_if_error: false
          verbose: true

  ##
  ## Job: Testsuite (Native)
  ##
  tests-native:
    name: "Tests: Native"
    runs-on: ubuntu-latest
    needs: [tests-jvm, dependency-review]
    continue-on-error: true # temporary
    if: |
      (
        github.ref == 'refs/heads/stable' ||
        contains(github.event.pull_request.labels.*.name, 'ci:test-native') ||
        contains(github.event.head_commit.message, 'ci:test-native') ||
        startsWith(github.ref, 'refs/tags/v')
      )
    steps:
      ## Setup: Checkout Code
      - name: "Setup: Checkout"
        uses: actions/checkout@v3

      ## Setup: GraalVM
      - name: "Setup: GraalVM"
        uses: graalvm/setup-graalvm@v1
        with:
          components: "native-image,js"
          version: latest
          java-version: 17
          github-token: ${{ secrets.GITHUB_TOKEN }}

      ## Setup: GCloud Auth
      - id: "auth"
        name: "Setup: Authorize Service Account"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.BUILDBOT_SERVICE_ACCOUNT }}"
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true

      ## Setup: Node
      - name: "Setup: Node"
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"

      ## Setup: Run Yarn
      - name: "Setup: Yarn"
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"

      ## Run Native Tests
      - name: "Run Tests (Native)"
        uses: gradle/gradle-build-action@v2.3.3
        with:
          cache-read-only: false
          arguments: |
            build
            test
            check
            jacocoTestReport
            koverMergedHtmlReport
            koverMergedXmlReport
            koverMergedReport
            :tools:reports:reports
            sonar
            --scan
            --warning-mode=none
            --dependency-verification=lenient
            -Pelide.ci=true
            -PbuildSamples=true
            -PbuildDocs=false
            -Pversions.java.language=17

      ## Collect Reports
      - uses: actions/upload-artifact@v3
        with:
          name: test-reports-native
          path: |
            **/build/reports/jacoco/test/jacocoTestReport.xml
            **/build/reports/jacoco/testCodeCoverageReport/jacocoTestReport.xml
            **/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml
            tools/reports/build/reports/**/*.xml
            tools/reports/build/test-results/**/*.xml

  ##
  ## Job: Docker Samples (JVM)
  ##
  docker-jvm:
    name: "Docker: JVM"
    runs-on: ubuntu-latest
    needs: [gradle, dependency-review]
    if: |
      (
        github.ref == 'refs/heads/stable' ||
        contains(github.event.pull_request.labels.*.name, 'ci:build-img-jvm') ||
        contains(github.event.head_commit.message, 'ci:build-img-jvm') ||
        startsWith(github.ref, 'refs/tags/v')
      )

    permissions:
      contents: "read"
      id-token: "write"
      checks: "write"
      pull-requests: "write"

    strategy:
      fail-fast: false
      matrix:
        project: ["server:helloworld"]
        include:
          - project: "server:hellocss"
          - project: "fullstack:basic:server"
          - project: "fullstack:ssr:server"
          - project: "fullstack:react:server"
          - project: "fullstack:react-ssr:server"

    steps:
      ## Setup: GraalVM
      - name: "Setup: GraalVM"
        uses: graalvm/setup-graalvm@v1
        with:
          components: "native-image,js"
          version: latest
          java-version: 17
          github-token: ${{ secrets.GITHUB_TOKEN }}

      ## Setup: QEMU
      - name: "Setup: QEMU"
        uses: docker/setup-qemu-action@v2

      ## Setup: Docker
      - name: "Setup: Docker"
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true

      ## Setup: Checkout Code
      - name: "Setup: Checkout"
        uses: actions/checkout@v3

      ## Setup: GCloud Auth
      - id: "auth"
        name: "Setup: Authorize Service Account"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.BUILDBOT_SERVICE_ACCOUNT }}"
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true

      ## Setup: GCloud SDK
      - name: "Setup: Setup Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v0"
        with:
          version: 389.0.0
          project_id: elide-fw

      ## Setup: Docker Auth (GAR)
      - name: "Authorize Docker: GCP"
        run: |
          gcloud auth configure-docker us-docker.pkg.dev

      ## Setup: Docker Auth (GHCR)
      - name: "Authorize Docker: GHCR"
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: elidebot
          password: ${{ secrets.BUILDBOT_GHCR_TOKEN }}

      ## -- Samples -- ##

      ## Docker Samples: Server - Hello World - JVM
      - name: "Build/Push: '${{ matrix.project }}' (JVM)"
        uses: gradle/gradle-build-action@v2.3.3
        with:
          arguments: |
            -Pelide.ci=true
            -Pversions.java.language=17
            -Pelide.runtime=JVM
            -x nativeCompile
            -x test
            :samples:${{ matrix.project }}:optimizedDockerBuild
            :samples:${{ matrix.project }}:optimizedDockerPush

  ##
  ## Job: Docker Samples (JVM)
  ##

  docker-native:
    name: "Docker: Native"
    runs-on: ubuntu-latest
    needs: [gradle, dependency-review]
    continue-on-error: true
    if: |
      (
        github.ref == 'refs/heads/stable' ||
        contains(github.event.pull_request.labels.*.name, 'ci:build-img-native') ||
        contains(github.event.head_commit.message, 'ci:build-img-native') ||
        startsWith(github.ref, 'refs/tags/v')
      )

    permissions:
      contents: "read"
      id-token: "write"
      checks: "write"
      pull-requests: "write"

    strategy:
      fail-fast: false
      matrix:
        project: ["server:helloworld"]
        include:
          - project: "server:hellocss"
          - project: "fullstack:basic:server"
          - project: "fullstack:ssr:server"
          - project: "fullstack:react:server"
          - project: "fullstack:react-ssr:server"

    steps:
      ## Setup: GraalVM
      - name: "Setup: GraalVM"
        uses: graalvm/setup-graalvm@v1
        with:
          components: "native-image,js"
          version: latest
          java-version: 17
          github-token: ${{ secrets.GITHUB_TOKEN }}

      ## Setup: QEMU
      - name: "Setup: QEMU"
        uses: docker/setup-qemu-action@v2

      ## Setup: Docker
      - name: "Setup: Docker"
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true

      ## Setup: Checkout Code
      - name: "Setup: Checkout"
        uses: actions/checkout@v3

      ## Setup: GCloud Auth
      - id: "auth"
        name: "Authorize Service Account"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.BUILDBOT_SERVICE_ACCOUNT }}"
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true

      ## Setup: GCloud SDK
      - name: "Setup: Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v0"
        with:
          version: 389.0.0
          project_id: elide-fw

      ## Setup: Docker Auth (GAR)
      - name: "Authorize Docker: GCP"
        run: |
          gcloud auth configure-docker us-docker.pkg.dev

      ## Setup: Docker Auth (GHCR)
      - name: "Authorize Docker: GHCR"
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: elidebot
          password: ${{ secrets.BUILDBOT_GHCR_TOKEN }}

      ## -- Samples -- ##

      ## Docker Samples: Server - Hello World - Native
      - name: "Build/Push: '${{ matrix.project }}' (Native)"
        uses: gradle/gradle-build-action@v2.3.3
        continue-on-error: true
        with:
          arguments: |
            -Pversions.java.language=17
            -Pelide.runtime=NATIVE
            -Pelide.ci=true
            -x test
            :samples:${{ matrix.project }}:optimizedDockerBuildNative
            :samples:${{ matrix.project }}:optimizedDockerPushNative

  ##
  ## Deploy: Samples
  ##

  deploy-samples:
    strategy:
      matrix:
        category: [fullstack]
        app: [react-ssr]
        variant: [jvm]

    name: "Deploy"
    runs-on: ubuntu-latest
    needs: [gradle, tests-jvm, tests-native, docker-jvm, docker-native, samples]
    if: |
      (
        github.ref == 'refs/heads/stable' ||
        contains(github.event.pull_request.labels.*.name, 'ci:deploy-samples') ||
        contains(github.event.head_commit.message, 'ci:deploy-samples') ||
        startsWith(github.ref, 'refs/tags/v')
      )

    permissions:
      contents: "read"
      id-token: "write"
      checks: "write"
      pull-requests: "write"

    steps:
      ## Setup: GraalVM
      - name: "Setup: GraalVM"
        uses: graalvm/setup-graalvm@v1
        with:
          components: "native-image,js"
          version: latest
          java-version: 17
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Setup: Fly"
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: "Deploy: ${{ matrix.sample }} (${{ matrix.variant }})"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          SAMPLE_CATEGORY: ${{ matrix.category }}
          SAMPLE_APP: ${{ matrix.app }}
          SAMPLE_VARIANT: ${{ matrix.variant }}
        run: |
          cd samples/$SAMPLE_CATEGORY/$SAMPLE_APP && \
            flyctl deploy \
            --remote-only \
            --image "us-docker.pkg.dev/elide-fw/samples/$SAMPLE_CATEGORY/$SAMPLE_APP/$SAMPLE_VARIANT:opt-latest";
